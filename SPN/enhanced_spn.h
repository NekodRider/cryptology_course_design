#include <stdio.h>
#define NR 12
#define S_SIZE 8
#define S_NUM 16
#define NUM128_SIZE 16

typedef struct num128
{
    unsigned char part[16];
} num128;

char *num2char(char *c, num128 a)
{
    int i, j;
    for (i = 15; i >= 0; i--)
    {
        for (j = 7; j >= 0; j--)
        {
            c[i * 8 + j] = '0';
            if ((a.part[i] >> (7 - j)) & 1)
                c[i * 8 + j] = '1';
        }
    }
    c[128] = '\0';
}

num128 sub_enhanced(num128 a)
{
    int i, j = 0;
    num128 result = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    unsigned int tmp, res = 0,
                      s_index[S_NUM * S_NUM] = {178, 127, 120, 71, 251, 115, 128, 105, 142, 23, 141, 15, 185, 100, 194, 136, 67, 207, 45, 247, 182, 82, 135, 123, 118, 93, 53, 230, 188, 246, 47, 124, 13, 114, 255, 199, 74, 180, 89, 248, 200, 152, 42, 37, 41, 186, 239, 227, 86, 190, 63, 159, 60, 221, 46, 26, 171, 147, 169, 68, 168, 130, 126, 2, 252, 51, 210, 156, 192, 38, 161, 62, 205, 164, 214, 66, 75, 206, 0, 166, 132, 52, 250, 119, 11, 103, 73, 179, 122, 191, 121, 203, 94, 198, 140, 108, 151, 10, 167, 193, 95, 163, 219, 212, 9, 39, 85, 22, 131, 254, 177, 49, 99, 44, 32, 113, 25, 139, 148, 84, 187, 249, 129, 145, 70, 27, 35, 242, 153, 20, 125, 189, 225, 138, 48, 213, 110, 197, 144, 88, 208, 234, 146, 87, 224, 237, 174, 4, 79, 231, 160, 222, 218, 28, 172, 96, 111, 238, 196, 175, 19, 104, 40, 14, 134, 202, 173, 154, 31, 149, 204, 97, 54, 107, 92, 181, 195, 61, 137, 7, 162, 24, 215, 226, 116, 98, 106, 58, 211, 243, 232, 72, 217, 69, 3, 5, 241, 233, 21, 133, 80, 236, 16, 78, 228, 165, 102, 6, 150, 65, 101, 170, 229, 223, 76, 56, 17, 209, 176, 8, 33, 90, 112, 83, 143, 201, 240, 18, 64, 117, 81, 55, 184, 29, 183, 155, 244, 1, 59, 36, 245, 50, 220, 30, 12, 216, 235, 57, 157, 109, 43, 91, 77, 253, 158, 34};
    for (j = 0; j < NUM128_SIZE; j++)
    {
        result.part[j] = s_index[a.part[j]];
    }
    return result;
}

num128 sub_enhanced_inverse(num128 a)
{
    int i, j = 0;
    num128 result = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    unsigned int tmp, res = 0,
                      mask = 0xff,
                      s_inverse_index[S_NUM * S_NUM] = {78, 237, 63, 194, 147, 195, 207, 179, 219, 104, 97, 84, 244, 32, 163, 11, 202, 216, 227, 160, 129, 198, 107, 9, 181, 116, 55, 125, 153, 233, 243, 168, 114, 220, 255, 126, 239, 43, 69, 105, 162, 44, 42, 250, 113, 18, 54, 30, 134, 111, 241, 65, 81, 26, 172, 231, 215, 247, 187, 238, 52, 177, 71, 50, 228, 209, 75, 16, 59, 193, 124, 3, 191, 86, 36, 76, 214, 252, 203, 148, 200, 230, 21, 223, 119, 106, 48, 143, 139, 38, 221, 251, 174, 25, 92, 100, 155, 171, 185, 112, 13, 210, 206, 85, 161, 7, 186, 173, 95, 249, 136, 156, 222, 115, 33, 5, 184, 229, 24, 83, 2, 90, 88, 23, 31, 130, 62, 1, 6, 122, 61, 108, 80, 199, 164, 22, 15, 178, 133, 117, 94, 10, 8, 224, 138, 123, 142, 57, 118, 169, 208, 96, 41, 128, 167, 235, 67, 248, 254, 51, 150, 70, 180, 101, 73, 205, 79, 98, 60, 58, 211, 56, 154, 166, 146, 159, 218, 110, 0, 87, 37, 175, 20, 234, 232, 12, 45, 120, 28, 131, 49, 89, 68, 99, 14, 176, 158, 137, 93, 35, 40, 225, 165, 91, 170, 72, 77, 17, 140, 217, 66, 188, 103, 135, 74, 182, 245, 192, 152, 102, 242, 53, 151, 213, 144, 132, 183, 47, 204, 212, 27, 149, 190, 197, 141, 246, 201, 145, 157, 46, 226, 196, 127, 189, 236, 240, 29, 19, 39, 121, 82, 4, 64, 253, 109, 34};
    for (j = 0; j < NUM128_SIZE; j++)
    {
        result.part[j] = s_inverse_index[a.part[j]];
    }
    return result;
}

num128 per_enhanced(num128 b)
{
    int i, j = 0;
    num128 result = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    unsigned int tmp, res = 0,
                      mask = 0x1,
                      p_index[128] = {123, 73, 27, 54, 102, 83, 57, 125, 107, 53, 36, 37, 8, 77, 106, 97, 122, 112, 16, 11, 96, 55, 74, 89, 2, 23, 15, 95, 90, 82, 12, 85, 110, 22, 44, 34, 113, 116, 67, 39, 40, 42, 58, 45, 25, 47, 70, 61, 33, 66, 5, 38, 76, 48, 114, 104, 78, 56, 17, 65, 105, 86, 26, 100, 10, 92, 29, 71, 80, 30, 68, 3, 98, 28, 13, 119, 50, 7, 62, 0, 75, 41, 14, 72, 111, 117, 1, 43, 88, 19, 20, 91, 51, 109, 124, 18, 99, 64, 9, 32, 127, 101, 81, 94, 21, 84, 52, 6, 59, 31, 79, 118, 108, 93, 46, 24, 69, 126, 115, 4, 35, 60, 87, 49, 120, 121, 103, 63};
    for (j = NUM128_SIZE - 1; j >= 0; j--)
    {
        for (i = 128 / NUM128_SIZE - 1; i >= 0; i--)
        {
            int current_index = j * 8 + i, x, y;
            if (b.part[j] & mask)
            {
                x = p_index[current_index] / 8;
                y = p_index[current_index] % 8;
                result.part[x] |= mask << (7 - y);
            }
            b.part[j] = b.part[j] >> 1;
        }
    }

    return result;
}

num128 per_enhanced_inverse(num128 b)
{
    int i, j = 0;
    num128 result = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    unsigned int tmp, res = 0,
                      mask = 0x1,
                      p_inverse_index[128] = {79, 86, 24, 71, 119, 50, 107, 77, 12, 98, 64, 19, 30, 74, 82, 26, 18, 58, 95, 89, 90, 104, 33, 25, 115, 44, 62, 2, 73, 66, 69, 109, 99, 48, 35, 120, 10, 11, 51, 39, 40, 81, 41, 87, 34, 43, 114, 45, 53, 123, 76, 92, 106, 9, 3, 21, 57, 6, 42, 108, 121, 47, 78, 127, 97, 59, 49, 38, 70, 116, 46, 67, 83, 1, 22, 80, 52, 13, 56, 110, 68, 102, 29, 5, 105, 31, 61, 122, 88, 23, 28, 91, 65, 113, 103, 27, 20, 15, 72, 96, 63, 101, 4, 126, 55, 60, 14, 8, 112, 93, 32, 84, 17, 36, 54, 118, 37, 85, 111, 75, 124, 125, 16, 0, 94, 7, 117, 100};
    for (j = NUM128_SIZE - 1; j >= 0; j--)
    {
        for (i = 128 / NUM128_SIZE - 1; i >= 0; i--)
        {
            int current_index = j * 8 + i, x, y;
            if (b.part[j] & mask)
            {
                x = p_inverse_index[current_index] / 8;
                y = p_inverse_index[current_index] % 8;
                result.part[x] |= mask << (7 - y);
            }
            b.part[j] = b.part[j] >> 1;
        }
    }

    return result;
}

void keygen_enhanced(num128 *ptk, num128 k)
{
    int i, j;
    char tmp = 0;
    *(ptk + 1) = k;
    for (i = 2; i < NR + 2; i++)
    {
        unsigned char ch;
        tmp = k.part[0];
        for (j = 0; j < NUM128_SIZE - 1; j++)
        {

            ch = (k.part[j + 1] & 0xf) << 4;
            k.part[j + 1] = (k.part[j + 1] >> 4) | ch;
            k.part[j] = k.part[j + 1];
        }
        ch = (tmp & 0xf) << 4;
        tmp = (tmp >> 4) | ch;
        k.part[NUM128_SIZE - 1] = tmp;
        k = sub_enhanced(k);
        *(ptk + i) = k;
    }
}

num128 spn_enhanced(num128 x, num128 *k)
{
    int i, r;
    num128 u, v, y = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                 w = x; //w0 = x
    for (r = 1; r < NR; r++)
    {
        for (i = 0; i < NUM128_SIZE; i++)
            u.part[i] = w.part[i] ^ k[r].part[i];
        v = sub_enhanced(u);
        w = per_enhanced(v);
    }
    for (i = 0; i < NUM128_SIZE; i++)
        u.part[i] = w.part[i] ^ k[NR].part[i];
    v = sub_enhanced(u);
    for (i = 0; i < NUM128_SIZE; i++)
        y.part[i] = v.part[i] ^ k[NR + 1].part[i];
    return y;
}

num128 spn_enhanced_inverse(num128 y, num128 *k)
{
    int i, r;
    num128 u, v, w, x = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    for (i = 0; i < NUM128_SIZE; i++)
        v.part[i] = y.part[i] ^ k[NR + 1].part[i];
    u = sub_enhanced_inverse(v);
    for (i = 0; i < NUM128_SIZE; i++)
        w.part[i] = u.part[i] ^ k[NR].part[i];
    for (r = NR - 1; r > 0; r--)
    {
        v = per_enhanced_inverse(w);
        u = sub_enhanced_inverse(v);
        for (i = 0; i < NUM128_SIZE; i++)
            w.part[i] = u.part[i] ^ k[r].part[i];
    }
    x = w;
    return x;
}
